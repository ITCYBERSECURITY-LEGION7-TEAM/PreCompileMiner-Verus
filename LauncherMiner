#!/bin/bash

# UI/UX Hacker Loading Animation
show_loading() {
    echo "╔════════════════════════════════════════╗"
    echo "║           CCMiner Auto Setup           ║"
    echo "║           VIPOR Mining Pool            ║"
    echo "╚════════════════════════════════════════╝"
    echo ""
    
    for i in {1..100}; do
        printf "\r["
        for ((j=0; j<i; j++)); do printf "▓"; done
        for ((j=i; j<100; j++)); do printf "░"; done
        printf "] %d%%" $i
        sleep 0.02
    done
    echo ""
    echo "✓ Setup completed successfully!"
    echo ""
}

# ASCII Art CCMiner
show_ascii_art() {
    cat << "EOF"
    
   ██████╗ ██████╗███╗   ███╗██╗███╗   ██╗███████╗██████╗ 
  ██╔════╝██╔════╝████╗ ████║██║████╗  ██║██╔════╝██╔══██╗
  ██║     ██║     ██╔████╔██║██║██╔██╗ ██║█████╗  ██████╔╝
  ██║     ██║     ██║╚██╔╝██║██║██║╚██╗██║██╔══╝  ██╔══██╗
  ╚██████╗╚██████╗██║ ╚═╝ ██║██║██║ ╚████║███████╗██║  ██║
   ╚═════╝ ╚═════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
                                                           
              VIPOR NETWORK MINING SUITE
            Auto Configuration System v2.0
                
EOF
}

# Detect System Information
detect_system() {
    echo "╔════════════════════════════════════════╗"
    echo "║          System Detection              ║"
    echo "╚════════════════════════════════════════╝"
    
    echo "✓ OS: $(uname -s)"
    echo "✓ Architecture: $(uname -m)"
    echo "✓ Hostname: $(hostname)"
    echo "✓ CPU Cores: $(nproc)"
    echo "✓ Total Memory: $(free -h | awk '/^Mem:/ {print $2}')"
    echo ""
}

# List VIPOR Mining Pools
VIPOR_POOLS=(
    "sg.vipor.net:5040:Singapore"
    "us.vipor.net:5040:USA"
    "eu.vipor.net:5040:Europe"
    "jp.vipor.net:5040:Japan"
    "kr.vipor.net:5040:Korea"
    "au.vipor.net:5040:Australia"
    "br.vipor.net:5040:Brazil"
    "ca.vipor.net:5040:Canada"
    "de.vipor.net:5040:Germany"
    "fr.vipor.net:5040:France"
    "uk.vipor.net:5040:United Kingdom"
    "in.vipor.net:5040:India"
    "ru.vipor.net:5040:Russia"
    "cn.vipor.net:5040:China"
    "hk.vipor.net:5040:Hong Kong"
    "tw.vipor.net:5040:Taiwan"
    "th.vipor.net:5040:Thailand"
    "vn.vipor.net:5040:Vietnam"
    "id.vipor.net:5040:Indonesia"
    "my.vipor.net:5040:Malaysia"
    "ph.vipor.net:5040:Philippines"
)

# Show available pools
show_pools() {
    echo "╔════════════════════════════════════════╗"
    echo "║       Available VIPOR Pools            ║"
    echo "╚════════════════════════════════════════╝"
    
    for i in "${!VIPOR_POOLS[@]}"; do
        IFS=':' read -ra POOL <<< "${VIPOR_POOLS[$i]}"
        printf "  %2d. %-20s [%s]\n" $((i+1)) "${POOL[2]}" "${POOL[0]}"
    done
    echo ""
}

# Get user input
get_user_input() {
    echo "╔════════════════════════════════════════╗"
    echo "║          Mining Configuration          ║"
    echo "╚════════════════════════════════════════╝"
    
    # Wallet Address
    while true; do
        read -p "📧 Enter your wallet address: " WALLET_ADDRESS
        if [[ -n "$WALLET_ADDRESS" ]]; then
            break
        else
            echo "❌ Wallet address cannot be empty!"
        fi
    done
    
    # Worker Name
    read -p "👷 Enter worker name [default: worker01]: " WORKER_NAME
    WORKER_NAME=${WORKER_NAME:-worker01}
    
    # Pool Selection
    while true; do
        show_pools
        read -p "🎯 Select pool number [1-${#VIPOR_POOLS[@]}]: " POOL_CHOICE
        
        if [[ $POOL_CHOICE -ge 1 && $POOL_CHOICE -le ${#VIPOR_POOLS[@]} ]]; then
            SELECTED_POOL=${VIPOR_POOLS[$((POOL_CHOICE-1))]}
            IFS=':' read -ra POOL_INFO <<< "$SELECTED_POOL"
            POOL_URL="${POOL_INFO[0]}"
            POOL_PORT="${POOL_INFO[1]}"
            POOL_LOCATION="${POOL_INFO[2]}"
            break
        else
            echo "❌ Invalid selection! Please choose between 1-${#VIPOR_POOLS[@]}"
        fi
    done
    
    # Algorithm (default to common ones)
    read -p "⚡ Enter algorithm [default: verus]: " ALGO
    ALGO=${ALGO:-verus}
    
    echo ""
}

# Create config.json
create_config() {
    local config_file="$HOME/ccminer/config.json"
    
    echo "╔════════════════════════════════════════╗"
    echo "║        Creating config.json            ║"
    echo "╚════════════════════════════════════════╝"
    
    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$config_file")"
    
    # Create config file
    cat > "$config_file" << EOF
{
    "pools": [
        {
            "url": "stratum+tcp://$POOL_URL:$POOL_PORT",
            "user": "$WALLET_ADDRESS.$WORKER_NAME",
            "pass": "hybrid"
        }
    ],
    "algo": "$ALGO",
    "threads": $(nproc),
    "cpu-priority": 1,
    "benchmark": false,
    "quiet": false,
    "log-file": "$HOME/ccminer/mining.log",
    "api-bind": "127.0.0.1:4068",
    "retry-pause": 5,
    "auto-reconnect": true
}
EOF

    echo "✓ Config file created: $config_file"
    echo "✓ Pool: $POOL_URL ($POOL_LOCATION)"
    echo "✓ Wallet: $WALLET_ADDRESS"
    echo "✓ Worker: $WORKER_NAME"
    echo "✓ Algorithm: $ALGO"
    echo ""
}

# Start mining
start_mining() {
    local miner_path="$HOME/ccminer/ccminer"
    local config_path="$HOME/ccminer/config.json"
    
    echo "╔════════════════════════════════════════╗"
    echo "║          Starting CCMiner             ║"
    echo "╚════════════════════════════════════════╝"
    
    # Check if ccminer exists
    if [[ ! -f "$miner_path" ]]; then
        echo "❌ CCMiner not found at: $miner_path"
        echo "📥 Please download ccminer first!"
        exit 1
    fi
    
    # Make executable
    chmod +x "$miner_path"
    
    # Show mining info
    echo "🚀 Starting miner with configuration:"
    echo "   📍 Pool: $POOL_URL:$POOL_PORT"
    echo "   👛 Wallet: $WALLET_ADDRESS"
    echo "   👷 Worker: $WORKER_NAME"
    echo "   ⚡ Algorithm: $ALGO"
    echo "   💻 Threads: $(nproc)"
    echo ""
    echo "⏳ Launching in 3 seconds..."
    sleep 3
    
    # Start mining
    "$miner_path" -c "$config_path"
}

# Main function
main() {
    clear
    show_ascii_art
    detect_system
    show_loading
    get_user_input
    create_config
    start_mining
}

# Error handling
set -e

# Run main function
main "$@"
